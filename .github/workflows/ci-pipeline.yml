name: CI Pipeline

on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.0
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Write lock file
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry lock

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --with dev

    - name: Run Ruff (linting)
      run: poetry run ruff check .

    - name: Run Ruff (formatting)
      run: poetry run ruff format --check .

    - name: Run isort (import sorting)
      run: poetry run isort . --check-only --diff

    - name: Run mypy (type checking)
      run: poetry run mypy productivity_tracker

    - name: Run bandit (security)
      run: poetry run bandit -r productivity_tracker -ll

    - name: Check dependencies (safety)
      run: poetry run safety check

  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: quality  # Only run tests if quality checks pass

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_productivity_tracker
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.0
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --with dev

    - name: Run tests with coverage
      env:
        TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_productivity_tracker
      run: make test-ci-full

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        fail_ci_if_error: false
