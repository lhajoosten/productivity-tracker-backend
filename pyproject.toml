[project]
name = "productivity-tracker-backend"
version = "0.1.0"
description = "Productivity Tracker API built with Python FastAPI"
authors = [
    {name = "Luc Joosten", email = "lhajoosten@outlook.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.12,<4.0"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "productivity-tracker"
version = "0.1.0"
description = "A FastAPI-based backend for tracking productivity metrics"
authors = ["Luc Joosten <lhajoosten@outlook.com>"]
readme = "README.md"
packages = [
    { include = "productivity_tracker" }
]

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.119.0"
uvicorn = {extras = ["standard"], version = "^0.38.0"}
sqlalchemy = "^2.0.25"
psycopg2-binary = "^2.9.9"
alembic = "^1.13.1"
pydantic = "^2.5.3"
pydantic-settings = "^2.1.0"
python-multipart = "^0.0.20"
pyjwt = "^2.8.0"
argon2-cffi = "^25.1.0"
python-dotenv = "^1.0.0"
redis = "^6.4.0"
minio = "^7.2.18"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
email-validator = "^2.1.0"
pytest-cov = "^7.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.0"
pytest-cov = "^7.0.0"
pytest-asyncio = "^1.2.0"
httpx = "^0.28.0"
black = "^25.9.0"
isort = "^7.0.0"
ruff = "^0.14.0"
mypy = "^1.8.0"
pre-commit = "^4.3.0"
bandit = "^1.8.6"
safety = "^3.6.2"

[tool.poetry.scripts]
prd_tracker = "productivity_tracker.cli:app"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*"]

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py312"
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "migrations",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
    "C4", # flake8-coding
    "N",  # naming conventions
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

# mypy configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
exclude = [
    "migrations/",
    ".venv/",
]

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests/", "migrations/", ".venv/"]
skips = ["B101", "B601"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=productivity_tracker --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["productivity_tracker"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
